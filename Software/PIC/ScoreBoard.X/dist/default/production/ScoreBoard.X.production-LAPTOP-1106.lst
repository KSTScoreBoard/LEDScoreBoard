

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Aug 19 15:41:31 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F1938
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F1938 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0090                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0097                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009B                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  010E                     	;# 
   106  0110                     	;# 
   107  0111                     	;# 
   108  0112                     	;# 
   109  0113                     	;# 
   110  0114                     	;# 
   111  0115                     	;# 
   112  0116                     	;# 
   113  0117                     	;# 
   114  0118                     	;# 
   115  0119                     	;# 
   116  011A                     	;# 
   117  011B                     	;# 
   118  011D                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0191                     	;# 
   122  0191                     	;# 
   123  0192                     	;# 
   124  0193                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0194                     	;# 
   128  0195                     	;# 
   129  0196                     	;# 
   130  0199                     	;# 
   131  019A                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019C                     	;# 
   137  019C                     	;# 
   138  019D                     	;# 
   139  019E                     	;# 
   140  019F                     	;# 
   141  020D                     	;# 
   142  0210                     	;# 
   143  0211                     	;# 
   144  0212                     	;# 
   145  0213                     	;# 
   146  0214                     	;# 
   147  0215                     	;# 
   148  0215                     	;# 
   149  0216                     	;# 
   150  0217                     	;# 
   151  0291                     	;# 
   152  0291                     	;# 
   153  0292                     	;# 
   154  0293                     	;# 
   155  0294                     	;# 
   156  0295                     	;# 
   157  0295                     	;# 
   158  0296                     	;# 
   159  0298                     	;# 
   160  0298                     	;# 
   161  0299                     	;# 
   162  029A                     	;# 
   163  029B                     	;# 
   164  029C                     	;# 
   165  029C                     	;# 
   166  029D                     	;# 
   167  029E                     	;# 
   168  029F                     	;# 
   169  0311                     	;# 
   170  0311                     	;# 
   171  0312                     	;# 
   172  0313                     	;# 
   173  0314                     	;# 
   174  0315                     	;# 
   175  0315                     	;# 
   176  0316                     	;# 
   177  0318                     	;# 
   178  0318                     	;# 
   179  0319                     	;# 
   180  031A                     	;# 
   181  031C                     	;# 
   182  031C                     	;# 
   183  031D                     	;# 
   184  031E                     	;# 
   185  0394                     	;# 
   186  0395                     	;# 
   187  0396                     	;# 
   188  0415                     	;# 
   189  0416                     	;# 
   190  0417                     	;# 
   191  041C                     	;# 
   192  041D                     	;# 
   193  041E                     	;# 
   194  0791                     	;# 
   195  0792                     	;# 
   196  0793                     	;# 
   197  0794                     	;# 
   198  0795                     	;# 
   199  0798                     	;# 
   200  0799                     	;# 
   201  07A0                     	;# 
   202  07A1                     	;# 
   203  07A3                     	;# 
   204  07A4                     	;# 
   205  07A6                     	;# 
   206  07A7                     	;# 
   207  07A9                     	;# 
   208  07AA                     	;# 
   209  0FE4                     	;# 
   210  0FE5                     	;# 
   211  0FE6                     	;# 
   212  0FE7                     	;# 
   213  0FE8                     	;# 
   214  0FE9                     	;# 
   215  0FEA                     	;# 
   216  0FEB                     	;# 
   217  0FED                     	;# 
   218  0FEE                     	;# 
   219  0FEF                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0098                     	;# 
   261  0099                     	;# 
   262  009A                     	;# 
   263  009B                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  010C                     	;# 
   269  010D                     	;# 
   270  010E                     	;# 
   271  0110                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0191                     	;# 
   287  0191                     	;# 
   288  0192                     	;# 
   289  0193                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0194                     	;# 
   293  0195                     	;# 
   294  0196                     	;# 
   295  0199                     	;# 
   296  019A                     	;# 
   297  019B                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019C                     	;# 
   302  019C                     	;# 
   303  019D                     	;# 
   304  019E                     	;# 
   305  019F                     	;# 
   306  020D                     	;# 
   307  0210                     	;# 
   308  0211                     	;# 
   309  0212                     	;# 
   310  0213                     	;# 
   311  0214                     	;# 
   312  0215                     	;# 
   313  0215                     	;# 
   314  0216                     	;# 
   315  0217                     	;# 
   316  0291                     	;# 
   317  0291                     	;# 
   318  0292                     	;# 
   319  0293                     	;# 
   320  0294                     	;# 
   321  0295                     	;# 
   322  0295                     	;# 
   323  0296                     	;# 
   324  0298                     	;# 
   325  0298                     	;# 
   326  0299                     	;# 
   327  029A                     	;# 
   328  029B                     	;# 
   329  029C                     	;# 
   330  029C                     	;# 
   331  029D                     	;# 
   332  029E                     	;# 
   333  029F                     	;# 
   334  0311                     	;# 
   335  0311                     	;# 
   336  0312                     	;# 
   337  0313                     	;# 
   338  0314                     	;# 
   339  0315                     	;# 
   340  0315                     	;# 
   341  0316                     	;# 
   342  0318                     	;# 
   343  0318                     	;# 
   344  0319                     	;# 
   345  031A                     	;# 
   346  031C                     	;# 
   347  031C                     	;# 
   348  031D                     	;# 
   349  031E                     	;# 
   350  0394                     	;# 
   351  0395                     	;# 
   352  0396                     	;# 
   353  0415                     	;# 
   354  0416                     	;# 
   355  0417                     	;# 
   356  041C                     	;# 
   357  041D                     	;# 
   358  041E                     	;# 
   359  0791                     	;# 
   360  0792                     	;# 
   361  0793                     	;# 
   362  0794                     	;# 
   363  0795                     	;# 
   364  0798                     	;# 
   365  0799                     	;# 
   366  07A0                     	;# 
   367  07A1                     	;# 
   368  07A3                     	;# 
   369  07A4                     	;# 
   370  07A6                     	;# 
   371  07A7                     	;# 
   372  07A9                     	;# 
   373  07AA                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385                           
   386                           	psect	idataBANK0
   387  0301                     __pidataBANK0:
   388                           
   389                           ;initializer for _segment
   390  0301  3440               	retlw	64
   391  0302  3479               	retlw	121
   392  0303  3424               	retlw	36
   393  0304  3430               	retlw	48
   394  0305  3419               	retlw	25
   395  0306  3412               	retlw	18
   396  0307  3402               	retlw	2
   397  0308  3478               	retlw	120
   398  0309  3400               	retlw	0
   399  030A  3410               	retlw	16
   400                           
   401                           ;initializer for Timer0@index
   402  030B  3401               	retlw	1
   403  000C                     _PORTA	set	12
   404  000E                     _PORTC	set	14
   405  000D                     _PORTB	set	13
   406  0015                     _TMR0	set	21
   407  006D                     _RB5	set	109
   408  006C                     _RB4	set	108
   409  006B                     _RB3	set	107
   410  006A                     _RB2	set	106
   411  0069                     _RB1	set	105
   412  0068                     _RB0	set	104
   413  005F                     _GIE	set	95
   414  005D                     _T0IE	set	93
   415  005A                     _T0IF	set	90
   416  008B                     _SSPIF	set	139
   417  008E                     _TRISC	set	142
   418  008D                     _TRISB	set	141
   419  008C                     _TRISA	set	140
   420  0095                     _OPTION_REGbits	set	149
   421  0099                     _OSCCON	set	153
   422  048B                     _SSPIE	set	1163
   423  018D                     _ANSELB	set	397
   424  018C                     _ANSELA	set	396
   425  0211                     _SSPBUF	set	529
   426  020D                     _WPUB	set	525
   427  0213                     _SSPMSK	set	531
   428  0212                     _SSPADD	set	530
   429  0216                     _SSPCON2	set	534
   430  0215                     _SSPCON1	set	533
   431  0214                     _SSPSTAT	set	532
   432                           
   433                           	psect	cinit
   434  011F                     start_initialization:	
   435                           ; #config settings
   436                           
   437  011F                     __initialization:
   438                           
   439                           ; Initialize objects allocated to BANK0
   440  011F  3001               	movlw	low __pidataBANK0
   441  0120  0084               	movwf	4
   442  0121  3083               	movlw	(high __pidataBANK0)| (0+128)
   443  0122  0085               	movwf	5
   444  0123  3045               	movlw	low __pdataBANK0
   445  0124  0086               	movwf	6
   446  0125  3000               	movlw	high __pdataBANK0
   447  0126  0087               	movwf	7
   448  0127  300B               	movlw	11
   449  0128  3183  230C  3181   	fcall	init_ram
   450                           
   451                           ; Clear objects allocated to COMMON
   452  012B  01FC               	clrf	__pbssCOMMON& (0+127)
   453                           
   454                           ; Clear objects allocated to BANK0
   455  012C  3035               	movlw	low __pbssBANK0
   456  012D  0084               	movwf	4
   457  012E  3000               	movlw	high __pbssBANK0
   458  012F  0085               	movwf	5
   459  0130  3010               	movlw	16
   460  0131  3183  2312  3181   	fcall	clear_ram0
   461  0134                     end_of_initialization:	
   462                           ;End of C runtime variable initialization code
   463                           
   464  0134                     __end_of__initialization:
   465  0134  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   466  0135  0020               	movlb	0
   467  0136  3181  2938         	ljmp	_main	;jump to C main() function
   468                           
   469                           	psect	bssCOMMON
   470  007C                     __pbssCOMMON:
   471  007C                     _io:
   472  007C                     	ds	1
   473                           
   474                           	psect	bssBANK0
   475  0035                     __pbssBANK0:
   476  0035                     _score_dig:
   477  0035                     	ds	6
   478  003B                     _time:
   479  003B                     	ds	2
   480  003D                     _score:
   481  003D                     	ds	2
   482  003F                     _count:
   483  003F                     	ds	2
   484  0041                     _data:
   485  0041                     	ds	2
   486  0043                     _send:
   487  0043                     	ds	1
   488  0044                     _buf:
   489  0044                     	ds	1
   490                           
   491                           	psect	dataBANK0
   492  0045                     __pdataBANK0:
   493  0045                     _segment:
   494  0045                     	ds	10
   495  004F                     Timer0@index:
   496  004F                     	ds	1
   497                           
   498                           	psect	inittext
   499  030C                     init_ram:
   500  030C  00FE               	movwf	btemp
   501  030D                     initloop:
   502  030D  0012               	moviw fsr0++
   503  030E  001E               	movwi fsr1++
   504  030F  0BFE               	decfsz	btemp,f
   505  0310  2B0D               	goto	initloop
   506  0311  3400               	retlw	0
   507                           
   508                           	psect	clrtext
   509  0312                     clear_ram0:	
   510                           ;	Called with FSR0 containing the base address, and
   511                           ;	WREG with the size to clear
   512                           
   513  0312  0064               	clrwdt	;clear the watchdog before getting into this loop
   514  0313                     clrloop0:
   515  0313  0180               	clrf	0	;clear RAM location pointed to by FSR
   516  0314  3101               	addfsr 0,1
   517  0315  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   518  0316  2B13               	goto	clrloop0	;have we reached the end yet?
   519  0317  3400               	retlw	0	;all done for this memory range, return
   520                           
   521                           	psect	cstackCOMMON
   522  0070                     __pcstackCOMMON:
   523  0070                     ?_main:
   524  0070                     ?_Timer0:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?___awmod:	
   528                           ; 1 bytes @ 0x0
   529                           
   530  0070                     ___awmod@divisor:	
   531                           ; 2 bytes @ 0x0
   532                           
   533                           
   534                           ; 2 bytes @ 0x0
   535  0070                     	ds	2
   536  0072                     ___awmod@dividend:
   537                           
   538                           ; 2 bytes @ 0x2
   539  0072                     	ds	2
   540  0074                     ??___awmod:
   541                           
   542                           ; 1 bytes @ 0x4
   543  0074                     	ds	1
   544  0075                     ___awmod@counter:
   545                           
   546                           ; 1 bytes @ 0x5
   547  0075                     	ds	1
   548  0076                     ___awmod@sign:
   549                           
   550                           ; 1 bytes @ 0x6
   551  0076                     	ds	1
   552  0077                     ?___awdiv:
   553  0077                     ___awdiv@divisor:	
   554                           ; 2 bytes @ 0x7
   555                           
   556                           
   557                           ; 2 bytes @ 0x7
   558  0077                     	ds	2
   559  0079                     ___awdiv@dividend:
   560                           
   561                           ; 2 bytes @ 0x9
   562  0079                     	ds	2
   563  007B                     ??___awdiv:
   564                           
   565                           ; 1 bytes @ 0xB
   566  007B                     	ds	1
   567                           
   568                           	psect	cstackBANK0
   569  0020                     __pcstackBANK0:
   570  0020                     ___awdiv@counter:
   571                           
   572                           ; 1 bytes @ 0x0
   573  0020                     	ds	1
   574  0021                     ___awdiv@sign:
   575                           
   576                           ; 1 bytes @ 0x1
   577  0021                     	ds	1
   578  0022                     ___awdiv@quotient:
   579                           
   580                           ; 2 bytes @ 0x2
   581  0022                     	ds	2
   582  0024                     ??_Timer0:
   583                           
   584                           ; 1 bytes @ 0x4
   585  0024                     	ds	3
   586  0027                     _Timer0$749:
   587                           
   588                           ; 2 bytes @ 0x7
   589  0027                     	ds	2
   590  0029                     Timer0@i:
   591                           
   592                           ; 2 bytes @ 0x9
   593  0029                     	ds	2
   594  002B                     ?___wmul:
   595  002B                     ___wmul@multiplier:	
   596                           ; 2 bytes @ 0xB
   597                           
   598                           
   599                           ; 2 bytes @ 0xB
   600  002B                     	ds	2
   601  002D                     ___wmul@multiplicand:
   602                           
   603                           ; 2 bytes @ 0xD
   604  002D                     	ds	2
   605  002F                     ??___wmul:
   606  002F                     ___wmul@product:	
   607                           ; 1 bytes @ 0xF
   608                           
   609                           
   610                           ; 2 bytes @ 0xF
   611  002F                     	ds	2
   612  0031                     ??_main:
   613                           
   614                           ; 1 bytes @ 0x11
   615  0031                     	ds	4
   616                           
   617                           	psect	maintext
   618  0138                     __pmaintext:	
   619 ;;
   620 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   621 ;;
   622 ;; *************** function _main *****************
   623 ;; Defined at:
   624 ;;		line 75 in file "main.c"
   625 ;; Parameters:    Size  Location     Type
   626 ;;		None
   627 ;; Auto vars:     Size  Location     Type
   628 ;;		None
   629 ;; Return value:  Size  Location     Type
   630 ;;                  1    wreg      void 
   631 ;; Registers used:
   632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : B1F/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   640 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
   641 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
   642 ;;Total ram usage:        4 bytes
   643 ;; Hardware stack levels required when called:    3
   644 ;; This function calls:
   645 ;;		___wmul
   646 ;; This function is called by:
   647 ;;		Startup code after reset
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _main
   653  0138                     _main:
   654  0138                     l1079:	
   655                           ;incstack = 0
   656                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   657                           
   658                           
   659                           ;main.c: 76:     OSCCON = 0b01110000;
   660  0138  3070               	movlw	112
   661  0139  0021               	movlb	1	; select bank1
   662  013A  0099               	movwf	25	;volatile
   663  013B                     l1081:
   664                           
   665                           ;main.c: 77:     OPTION_REGbits.nWPUEN = 0x00;
   666  013B  1395               	bcf	21,7	;volatile
   667                           
   668                           ;main.c: 79:     SSPSTAT = 0b10000000;
   669  013C  3080               	movlw	128
   670  013D  0024               	movlb	4	; select bank4
   671  013E  0094               	movwf	20	;volatile
   672                           
   673                           ;main.c: 80:     SSPCON1 = 0b00100110;
   674  013F  3026               	movlw	38
   675  0140  0095               	movwf	21	;volatile
   676  0141                     l1083:
   677                           
   678                           ;main.c: 81:     SSPCON2 |= 0x01;
   679  0141  1416               	bsf	22,0	;volatile
   680                           
   681                           ;main.c: 82:     SSPADD = (8 << 1) & 0xFE;
   682  0142  3010               	movlw	16
   683  0143  0092               	movwf	18	;volatile
   684                           
   685                           ;main.c: 83:     SSPMSK = 0xFE;
   686  0144  30FE               	movlw	254
   687  0145  0093               	movwf	19	;volatile
   688  0146                     l1085:
   689                           
   690                           ;main.c: 84:     SSPIF = 0;
   691  0146  0020               	movlb	0	; select bank0
   692  0147  1191               	bcf	17,3	;volatile
   693  0148                     l1087:
   694                           
   695                           ;main.c: 85:     SSPIE = 1;
   696  0148  0021               	movlb	1	; select bank1
   697  0149  1591               	bsf	17,3	;volatile
   698  014A                     l1089:
   699                           
   700                           ;main.c: 87:     ANSELA = 0x00;
   701  014A  0023               	movlb	3	; select bank3
   702  014B  018C               	clrf	12	;volatile
   703  014C                     l1091:
   704                           
   705                           ;main.c: 88:     TRISA = 0x00;
   706  014C  0021               	movlb	1	; select bank1
   707  014D  018C               	clrf	12	;volatile
   708  014E                     l1093:
   709                           
   710                           ;main.c: 89:     ANSELB = 0x00;
   711  014E  0023               	movlb	3	; select bank3
   712  014F  018D               	clrf	13	;volatile
   713  0150                     l1095:
   714                           
   715                           ;main.c: 90:     TRISB = 0xFF;
   716  0150  30FF               	movlw	255
   717  0151  0021               	movlb	1	; select bank1
   718  0152  008D               	movwf	13	;volatile
   719  0153                     l1097:
   720                           
   721                           ;main.c: 91:     WPUB = 0xFF;
   722  0153  30FF               	movlw	255
   723  0154  0024               	movlb	4	; select bank4
   724  0155  008D               	movwf	13	;volatile
   725  0156                     l1099:
   726                           
   727                           ;main.c: 92:     TRISC = 0b11000;
   728  0156  3018               	movlw	24
   729  0157  0021               	movlb	1	; select bank1
   730  0158  008E               	movwf	14	;volatile
   731  0159                     l1101:
   732                           
   733                           ;main.c: 95:     OPTION_REGbits.PS = 0b100;
   734  0159  0815               	movf	21,w	;volatile
   735  015A  39F8               	andlw	-8
   736  015B  3804               	iorlw	4
   737  015C  0095               	movwf	21	;volatile
   738  015D                     l1103:
   739                           
   740                           ;main.c: 96:     OPTION_REGbits.PSA = 0;
   741  015D  1195               	bcf	21,3	;volatile
   742  015E                     l1105:
   743                           
   744                           ;main.c: 97:     OPTION_REGbits.TMR0CS = 0;
   745  015E  1295               	bcf	21,5	;volatile
   746  015F                     l1107:
   747                           
   748                           ;main.c: 98:     OPTION_REGbits.TMR0SE = 1;
   749  015F  1615               	bsf	21,4	;volatile
   750  0160                     l1109:
   751                           
   752                           ;main.c: 99:     TMR0 = 0;
   753  0160  0020               	movlb	0	; select bank0
   754  0161  0195               	clrf	21	;volatile
   755  0162                     l1111:
   756                           
   757                           ;main.c: 100:     T0IF = 0;
   758  0162  110B               	bcf	11,2	;volatile
   759  0163                     l1113:
   760                           
   761                           ;main.c: 101:     T0IE = 1;
   762  0163  168B               	bsf	11,5	;volatile
   763  0164                     l1115:
   764                           
   765                           ;main.c: 102:     GIE = 1;
   766  0164  178B               	bsf	11,7	;volatile
   767  0165                     l81:	
   768                           ;main.c: 103:     while(1){
   769                           
   770                           
   771                           ;main.c: 104:         if(PORTB != 0xFF){
   772  0165  0020               	movlb	0	; select bank0
   773  0166  0A0D               	incf	13,w	;volatile
   774  0167  1903               	btfsc	3,2
   775  0168  296A               	goto	u731
   776  0169  296B               	goto	u730
   777  016A                     u731:
   778  016A  2965               	goto	l81
   779  016B                     u730:
   780  016B                     l1117:
   781                           
   782                           ;main.c: 105:             T0IE = 0;
   783  016B  128B               	bcf	11,5	;volatile
   784                           
   785                           ;main.c: 106:             if(!RB0) score_dig[2]++;
   786  016C  180D               	btfsc	13,0	;volatile
   787  016D  296F               	goto	u741
   788  016E  2970               	goto	u740
   789  016F                     u741:
   790  016F  2974               	goto	l1121
   791  0170                     u740:
   792  0170                     l1119:
   793  0170  3001               	movlw	1
   794  0171  07B9               	addwf	_score_dig+4,f
   795  0172  3000               	movlw	0
   796  0173  3DBA               	addwfc	_score_dig+5,f
   797  0174                     l1121:
   798                           
   799                           ;main.c: 107:             if(!RB1) score_dig[2]--;
   800  0174  188D               	btfsc	13,1	;volatile
   801  0175  2977               	goto	u751
   802  0176  2978               	goto	u750
   803  0177                     u751:
   804  0177  297C               	goto	l1125
   805  0178                     u750:
   806  0178                     l1123:
   807  0178  30FF               	movlw	255
   808  0179  07B9               	addwf	_score_dig+4,f
   809  017A  30FF               	movlw	255
   810  017B  3DBA               	addwfc	_score_dig+5,f
   811  017C                     l1125:
   812                           
   813                           ;main.c: 108:             if(!RB2) score_dig[1]++;
   814  017C  190D               	btfsc	13,2	;volatile
   815  017D  297F               	goto	u761
   816  017E  2980               	goto	u760
   817  017F                     u761:
   818  017F  2984               	goto	l1129
   819  0180                     u760:
   820  0180                     l1127:
   821  0180  3001               	movlw	1
   822  0181  07B7               	addwf	_score_dig+2,f
   823  0182  3000               	movlw	0
   824  0183  3DB8               	addwfc	_score_dig+3,f
   825  0184                     l1129:
   826                           
   827                           ;main.c: 109:             if(!RB3) score_dig[1]--;
   828  0184  198D               	btfsc	13,3	;volatile
   829  0185  2987               	goto	u771
   830  0186  2988               	goto	u770
   831  0187                     u771:
   832  0187  298C               	goto	l1133
   833  0188                     u770:
   834  0188                     l1131:
   835  0188  30FF               	movlw	255
   836  0189  07B7               	addwf	_score_dig+2,f
   837  018A  30FF               	movlw	255
   838  018B  3DB8               	addwfc	_score_dig+3,f
   839  018C                     l1133:
   840                           
   841                           ;main.c: 110:             if(!RB4) score_dig[0]++;
   842  018C  1A0D               	btfsc	13,4	;volatile
   843  018D  298F               	goto	u781
   844  018E  2990               	goto	u780
   845  018F                     u781:
   846  018F  2994               	goto	l1137
   847  0190                     u780:
   848  0190                     l1135:
   849  0190  3001               	movlw	1
   850  0191  07B5               	addwf	_score_dig,f
   851  0192  3000               	movlw	0
   852  0193  3DB6               	addwfc	_score_dig+1,f
   853  0194                     l1137:
   854                           
   855                           ;main.c: 111:             if(!RB5) score_dig[0]--;
   856  0194  1A8D               	btfsc	13,5	;volatile
   857  0195  2997               	goto	u791
   858  0196  2998               	goto	u790
   859  0197                     u791:
   860  0197  299C               	goto	l1141
   861  0198                     u790:
   862  0198                     l1139:
   863  0198  30FF               	movlw	255
   864  0199  07B5               	addwf	_score_dig,f
   865  019A  30FF               	movlw	255
   866  019B  3DB6               	addwfc	_score_dig+1,f
   867  019C                     l1141:
   868                           
   869                           ;main.c: 112:             if(score_dig[2] < 0)score_dig[2] = 9;
   870  019C  3004               	movlw	4
   871  019D  3E35               	addlw	(low (_score_dig| 0))& (0+255)
   872  019E  0086               	movwf	6
   873  019F  0187               	clrf	7
   874  01A0  3141               	addfsr 1,1
   875  01A1  1F81               	btfss	1,7
   876  01A2  29A4               	goto	u801
   877  01A3  29A5               	goto	u800
   878  01A4                     u801:
   879  01A4  29A9               	goto	l89
   880  01A5                     u800:
   881  01A5                     l1143:
   882  01A5  3009               	movlw	9
   883  01A6  00B9               	movwf	_score_dig+4
   884  01A7  3000               	movlw	0
   885  01A8  00BA               	movwf	_score_dig+5
   886  01A9                     l89:
   887                           
   888                           ;main.c: 113:             if(score_dig[2] > 9)score_dig[2] = 0;
   889  01A9  083A               	movf	_score_dig+5,w
   890  01AA  3A80               	xorlw	128
   891  01AB  00B1               	movwf	??_main
   892  01AC  3080               	movlw	128
   893  01AD  0231               	subwf	??_main,w
   894  01AE  1D03               	skipz
   895  01AF  29B2               	goto	u815
   896  01B0  300A               	movlw	10
   897  01B1  0239               	subwf	_score_dig+4,w
   898  01B2                     u815:
   899  01B2  1C03               	skipc
   900  01B3  29B5               	goto	u811
   901  01B4  29B6               	goto	u810
   902  01B5                     u811:
   903  01B5  29B9               	goto	l1147
   904  01B6                     u810:
   905  01B6                     l1145:
   906  01B6  0020               	movlb	0	; select bank0
   907  01B7  01B9               	clrf	_score_dig+4
   908  01B8  01BA               	clrf	_score_dig+5
   909  01B9                     l1147:
   910                           
   911                           ;main.c: 114:             if(score_dig[1] < 0)score_dig[1] = 9;
   912  01B9  3002               	movlw	2
   913  01BA  3E35               	addlw	(low (_score_dig| 0))& (0+255)
   914  01BB  0086               	movwf	6
   915  01BC  0187               	clrf	7
   916  01BD  3141               	addfsr 1,1
   917  01BE  1F81               	btfss	1,7
   918  01BF  29C1               	goto	u821
   919  01C0  29C2               	goto	u820
   920  01C1                     u821:
   921  01C1  29C7               	goto	l91
   922  01C2                     u820:
   923  01C2                     l1149:
   924  01C2  3009               	movlw	9
   925  01C3  0020               	movlb	0	; select bank0
   926  01C4  00B7               	movwf	_score_dig+2
   927  01C5  3000               	movlw	0
   928  01C6  00B8               	movwf	_score_dig+3
   929  01C7                     l91:
   930                           
   931                           ;main.c: 115:             if(score_dig[1] > 9)score_dig[1] = 0;
   932  01C7  0020               	movlb	0	; select bank0
   933  01C8  0838               	movf	_score_dig+3,w
   934  01C9  3A80               	xorlw	128
   935  01CA  00B1               	movwf	??_main
   936  01CB  3080               	movlw	128
   937  01CC  0231               	subwf	??_main,w
   938  01CD  1D03               	skipz
   939  01CE  29D1               	goto	u835
   940  01CF  300A               	movlw	10
   941  01D0  0237               	subwf	_score_dig+2,w
   942  01D1                     u835:
   943  01D1  1C03               	skipc
   944  01D2  29D4               	goto	u831
   945  01D3  29D5               	goto	u830
   946  01D4                     u831:
   947  01D4  29D8               	goto	l1153
   948  01D5                     u830:
   949  01D5                     l1151:
   950  01D5  0020               	movlb	0	; select bank0
   951  01D6  01B7               	clrf	_score_dig+2
   952  01D7  01B8               	clrf	_score_dig+3
   953  01D8                     l1153:
   954                           
   955                           ;main.c: 116:             if(score_dig[0] < 0)score_dig[0] = 9;
   956  01D8  0020               	movlb	0	; select bank0
   957  01D9  1FB6               	btfss	_score_dig+1,7
   958  01DA  29DC               	goto	u841
   959  01DB  29DD               	goto	u840
   960  01DC                     u841:
   961  01DC  29E1               	goto	l93
   962  01DD                     u840:
   963  01DD                     l1155:
   964  01DD  3009               	movlw	9
   965  01DE  00B5               	movwf	_score_dig
   966  01DF  3000               	movlw	0
   967  01E0  00B6               	movwf	_score_dig+1
   968  01E1                     l93:
   969                           
   970                           ;main.c: 117:             if(score_dig[0] > 9)score_dig[0] = 0;
   971  01E1  0836               	movf	_score_dig+1,w
   972  01E2  3A80               	xorlw	128
   973  01E3  00B1               	movwf	??_main
   974  01E4  3080               	movlw	128
   975  01E5  0231               	subwf	??_main,w
   976  01E6  1D03               	skipz
   977  01E7  29EA               	goto	u855
   978  01E8  300A               	movlw	10
   979  01E9  0235               	subwf	_score_dig,w
   980  01EA                     u855:
   981  01EA  1C03               	skipc
   982  01EB  29ED               	goto	u851
   983  01EC  29EE               	goto	u850
   984  01ED                     u851:
   985  01ED  29F1               	goto	l1159
   986  01EE                     u850:
   987  01EE                     l1157:
   988  01EE  0020               	movlb	0	; select bank0
   989  01EF  01B5               	clrf	_score_dig
   990  01F0  01B6               	clrf	_score_dig+1
   991  01F1                     l1159:
   992                           
   993                           ;main.c: 118:             score = score_dig[0] * 100 + score_dig[1] * 10 + score_dig[2];
   994  01F1  3004               	movlw	4
   995  01F2  3E35               	addlw	(low (_score_dig| 0))& (0+255)
   996  01F3  0086               	movwf	6
   997  01F4  0187               	clrf	7
   998  01F5  0020               	movlb	0	; select bank0
   999  01F6  0836               	movf	_score_dig+1,w
  1000  01F7  00AC               	movwf	___wmul@multiplier+1
  1001  01F8  0835               	movf	_score_dig,w
  1002  01F9  00AB               	movwf	___wmul@multiplier
  1003  01FA  3064               	movlw	100
  1004  01FB  00AD               	movwf	___wmul@multiplicand
  1005  01FC  3000               	movlw	0
  1006  01FD  00AE               	movwf	___wmul@multiplicand+1
  1007  01FE  3182  22E1  3181   	fcall	___wmul
  1008  0201  0020               	movlb	0	; select bank0
  1009  0202  082B               	movf	?___wmul,w
  1010  0203  00B1               	movwf	??_main
  1011  0204  082C               	movf	?___wmul+1,w
  1012  0205  00B2               	movwf	??_main+1
  1013  0206  0838               	movf	_score_dig+3,w
  1014  0207  00AC               	movwf	___wmul@multiplier+1
  1015  0208  0837               	movf	_score_dig+2,w
  1016  0209  00AB               	movwf	___wmul@multiplier
  1017  020A  300A               	movlw	10
  1018  020B  00AD               	movwf	___wmul@multiplicand
  1019  020C  3000               	movlw	0
  1020  020D  00AE               	movwf	___wmul@multiplicand+1
  1021  020E  3182  22E1  3181   	fcall	___wmul
  1022  0211  0020               	movlb	0	; select bank0
  1023  0212  082B               	movf	?___wmul,w
  1024  0213  0731               	addwf	??_main,w
  1025  0214  00B3               	movwf	??_main+2
  1026  0215  082C               	movf	?___wmul+1,w
  1027  0216  3D32               	addwfc	??_main+1,w
  1028  0217  00B4               	movwf	??_main+3
  1029  0218  3F40               	moviw [0]fsr1
  1030  0219  0733               	addwf	??_main+2,w
  1031  021A  00BD               	movwf	_score
  1032  021B  3F41               	moviw [1]fsr1
  1033  021C  3D34               	addwfc	??_main+3,w
  1034  021D  00BE               	movwf	_score+1
  1035  021E                     l1161:
  1036                           
  1037                           ;main.c: 119:             T0IE = 1;
  1038  021E  168B               	bsf	11,5	;volatile
  1039  021F                     l1163:
  1040                           
  1041                           ;main.c: 120:             _delay((unsigned long)((50)*(32000000/4000.0)));
  1042  021F  3003               	movlw	3
  1043  0220  0020               	movlb	0	; select bank0
  1044  0221  00B2               	movwf	??_main+1
  1045  0222  3008               	movlw	8
  1046  0223  00B1               	movwf	??_main
  1047  0224  3077               	movlw	119
  1048  0225                     u997:
  1049  0225  0B89               	decfsz	9,f
  1050  0226  2A25               	goto	u997
  1051  0227  0BB1               	decfsz	??_main,f
  1052  0228  2A25               	goto	u997
  1053  0229  0BB2               	decfsz	??_main+1,f
  1054  022A  2A25               	goto	u997
  1055  022B  2965               	goto	l81
  1056  022C  3181  291D         	ljmp	start
  1057  022E                     __end_of_main:
  1058                           
  1059                           	psect	text1
  1060  02E1                     __ptext1:	
  1061 ;; *************** function ___wmul *****************
  1062 ;; Defined at:
  1063 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul16.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  multiplier      2   11[BANK0 ] unsigned int 
  1066 ;;  multiplicand    2   13[BANK0 ] unsigned int 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  product         2   15[BANK0 ] unsigned int 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  2   11[BANK0 ] unsigned int 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1081 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1082 ;;Total ram usage:        6 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    2
  1085 ;; This function calls:
  1086 ;;		Nothing
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           
  1093                           ;psect for function ___wmul
  1094  02E1                     ___wmul:
  1095  02E1                     l983:	
  1096                           ;incstack = 0
  1097                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1098                           
  1099  02E1  0020               	movlb	0	; select bank0
  1100  02E2  01AF               	clrf	___wmul@product
  1101  02E3  01B0               	clrf	___wmul@product+1
  1102  02E4                     l985:
  1103  02E4  1C2B               	btfss	___wmul@multiplier,0
  1104  02E5  2AE7               	goto	u501
  1105  02E6  2AE8               	goto	u500
  1106  02E7                     u501:
  1107  02E7  2AEC               	goto	l277
  1108  02E8                     u500:
  1109  02E8                     l987:
  1110  02E8  082D               	movf	___wmul@multiplicand,w
  1111  02E9  07AF               	addwf	___wmul@product,f
  1112  02EA  082E               	movf	___wmul@multiplicand+1,w
  1113  02EB  3DB0               	addwfc	___wmul@product+1,f
  1114  02EC                     l277:
  1115  02EC  3001               	movlw	1
  1116  02ED                     u515:
  1117  02ED  35AD               	lslf	___wmul@multiplicand,f
  1118  02EE  0DAE               	rlf	___wmul@multiplicand+1,f
  1119  02EF  0B89               	decfsz	9,f
  1120  02F0  2AED               	goto	u515
  1121  02F1                     l989:
  1122  02F1  3001               	movlw	1
  1123  02F2                     u525:
  1124  02F2  36AC               	lsrf	___wmul@multiplier+1,f
  1125  02F3  0CAB               	rrf	___wmul@multiplier,f
  1126  02F4  0B89               	decfsz	9,f
  1127  02F5  2AF2               	goto	u525
  1128  02F6                     l991:
  1129  02F6  082B               	movf	___wmul@multiplier,w
  1130  02F7  042C               	iorwf	___wmul@multiplier+1,w
  1131  02F8  1D03               	btfss	3,2
  1132  02F9  2AFB               	goto	u531
  1133  02FA  2AFC               	goto	u530
  1134  02FB                     u531:
  1135  02FB  2AE4               	goto	l985
  1136  02FC                     u530:
  1137  02FC                     l993:
  1138  02FC  0830               	movf	___wmul@product+1,w
  1139  02FD  00AC               	movwf	?___wmul+1
  1140  02FE  082F               	movf	___wmul@product,w
  1141  02FF  00AB               	movwf	?___wmul
  1142  0300                     l279:
  1143  0300  0008               	return
  1144  0301                     __end_of___wmul:
  1145                           
  1146                           	psect	intentry
  1147  0004                     __pintentry:	
  1148 ;; *************** function _Timer0 *****************
  1149 ;; Defined at:
  1150 ;;		line 127 in file "main.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  i               2    9[BANK0 ] int 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1165 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1166 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1167 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1168 ;;Total ram usage:        7 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    1
  1171 ;; This function calls:
  1172 ;;		___awdiv
  1173 ;;		___awmod
  1174 ;; This function is called by:
  1175 ;;		Interrupt level 1
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179  0004                     _Timer0:
  1180                           
  1181                           ;incstack = 0
  1182  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  1183                           
  1184                           ; Regs used in _Timer0: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1185  0005  3180               	pagesel	$
  1186  0006                     i1l1165:
  1187                           
  1188                           ;main.c: 128:     if(T0IF == 1){
  1189  0006  1D0B               	btfss	11,2	;volatile
  1190  0007  2809               	goto	u86_21
  1191  0008  280A               	goto	u86_20
  1192  0009                     u86_21:
  1193  0009  28E0               	goto	i1l104
  1194  000A                     u86_20:
  1195  000A                     i1l1167:
  1196                           
  1197                           ;main.c: 129:         PORTC = 0b111;
  1198  000A  3007               	movlw	7
  1199  000B  0020               	movlb	0	; select bank0
  1200  000C  008E               	movwf	14	;volatile
  1201  000D                     i1l1169:
  1202                           
  1203                           ;main.c: 130:         static char index = 1;;main.c: 131:         index = (index % 3) + 
      +                          1;
  1204  000D  3003               	movlw	3
  1205  000E  00F0               	movwf	___awmod@divisor
  1206  000F  3000               	movlw	0
  1207  0010  00F1               	movwf	___awmod@divisor+1
  1208  0011  084F               	movf	Timer0@index,w
  1209  0012  00A4               	movwf	??_Timer0
  1210  0013  01A5               	clrf	??_Timer0+1
  1211  0014  0824               	movf	??_Timer0,w
  1212  0015  00F2               	movwf	___awmod@dividend
  1213  0016  0825               	movf	??_Timer0+1,w
  1214  0017  00F3               	movwf	___awmod@dividend+1
  1215  0018  3182  228E  3180   	fcall	___awmod
  1216  001B  0870               	movf	?___awmod,w
  1217  001C  3E01               	addlw	1
  1218  001D  0020               	movlb	0	; select bank0
  1219  001E  00A6               	movwf	??_Timer0+2
  1220  001F  0826               	movf	??_Timer0+2,w
  1221  0020  00CF               	movwf	Timer0@index
  1222  0021                     i1l1171:
  1223                           
  1224                           ;main.c: 132:         score_dig[0] = score / 100;
  1225  0021  3064               	movlw	100
  1226  0022  00F7               	movwf	___awdiv@divisor
  1227  0023  3000               	movlw	0
  1228  0024  00F8               	movwf	___awdiv@divisor+1
  1229  0025  083E               	movf	_score+1,w
  1230  0026  00FA               	movwf	___awdiv@dividend+1
  1231  0027  083D               	movf	_score,w
  1232  0028  00F9               	movwf	___awdiv@dividend
  1233  0029  3182  222E  3180   	fcall	___awdiv
  1234  002C  0878               	movf	?___awdiv+1,w
  1235  002D  0020               	movlb	0	; select bank0
  1236  002E  00B6               	movwf	_score_dig+1
  1237  002F  0877               	movf	?___awdiv,w
  1238  0030  00B5               	movwf	_score_dig
  1239  0031                     i1l1173:
  1240                           
  1241                           ;main.c: 133:         score_dig[1] = score % 100 / 10;
  1242  0031  300A               	movlw	10
  1243  0032  00F7               	movwf	___awdiv@divisor
  1244  0033  3000               	movlw	0
  1245  0034  00F8               	movwf	___awdiv@divisor+1
  1246  0035  083E               	movf	_score+1,w
  1247  0036  00F3               	movwf	___awmod@dividend+1
  1248  0037  083D               	movf	_score,w
  1249  0038  00F2               	movwf	___awmod@dividend
  1250  0039  3064               	movlw	100
  1251  003A  00F0               	movwf	___awmod@divisor
  1252  003B  3000               	movlw	0
  1253  003C  00F1               	movwf	___awmod@divisor+1
  1254  003D  3182  228E  3180   	fcall	___awmod
  1255  0040  0871               	movf	?___awmod+1,w
  1256  0041  00FA               	movwf	___awdiv@dividend+1
  1257  0042  0870               	movf	?___awmod,w
  1258  0043  00F9               	movwf	___awdiv@dividend
  1259  0044  3182  222E  3180   	fcall	___awdiv
  1260  0047  0878               	movf	?___awdiv+1,w
  1261  0048  0020               	movlb	0	; select bank0
  1262  0049  00B8               	movwf	_score_dig+3
  1263  004A  0877               	movf	?___awdiv,w
  1264  004B  00B7               	movwf	_score_dig+2
  1265  004C                     i1l1175:
  1266                           
  1267                           ;main.c: 134:         score_dig[2] = score % 100 % 10;
  1268  004C  083E               	movf	_score+1,w
  1269  004D  00F3               	movwf	___awmod@dividend+1
  1270  004E  083D               	movf	_score,w
  1271  004F  00F2               	movwf	___awmod@dividend
  1272  0050  3064               	movlw	100
  1273  0051  00F0               	movwf	___awmod@divisor
  1274  0052  3000               	movlw	0
  1275  0053  00F1               	movwf	___awmod@divisor+1
  1276  0054  3182  228E  3180   	fcall	___awmod
  1277  0057  0871               	movf	?___awmod+1,w
  1278  0058  0020               	movlb	0	; select bank0
  1279  0059  00A8               	movwf	_Timer0$749+1
  1280  005A  0870               	movf	?___awmod,w
  1281  005B  00A7               	movwf	_Timer0$749
  1282  005C                     i1l1177:
  1283                           
  1284                           ;main.c: 134:         score_dig[2] = score % 100 % 10;
  1285  005C  300A               	movlw	10
  1286  005D  00F0               	movwf	___awmod@divisor
  1287  005E  3000               	movlw	0
  1288  005F  00F1               	movwf	___awmod@divisor+1
  1289  0060  0828               	movf	_Timer0$749+1,w
  1290  0061  00F3               	movwf	___awmod@dividend+1
  1291  0062  0827               	movf	_Timer0$749,w
  1292  0063  00F2               	movwf	___awmod@dividend
  1293  0064  3182  228E  3180   	fcall	___awmod
  1294  0067  0871               	movf	?___awmod+1,w
  1295  0068  0020               	movlb	0	; select bank0
  1296  0069  00BA               	movwf	_score_dig+5
  1297  006A  0870               	movf	?___awmod,w
  1298  006B  00B9               	movwf	_score_dig+4
  1299  006C                     i1l1179:
  1300                           
  1301                           ;main.c: 135:         for(int i=0;i<256;i++){
  1302  006C  01A9               	clrf	Timer0@i
  1303  006D  01AA               	clrf	Timer0@i+1
  1304  006E                     i1l1185:
  1305                           
  1306                           ;main.c: 136:             if(index == 1){
  1307  006E  0020               	movlb	0	; select bank0
  1308  006F  034F               	decf	Timer0@index,w
  1309  0070  1D03               	btfss	3,2
  1310  0071  2873               	goto	u87_21
  1311  0072  2874               	goto	u87_20
  1312  0073                     u87_21:
  1313  0073  288E               	goto	i1l1193
  1314  0074                     u87_20:
  1315  0074                     i1l1187:
  1316                           
  1317                           ;main.c: 137:                 PORTC = 0b110;
  1318  0074  3006               	movlw	6
  1319  0075  008E               	movwf	14	;volatile
  1320                           
  1321                           ;main.c: 138:                 if(i < 32){
  1322  0076  082A               	movf	Timer0@i+1,w
  1323  0077  3A80               	xorlw	128
  1324  0078  00A4               	movwf	??_Timer0
  1325  0079  3080               	movlw	128
  1326  007A  0224               	subwf	??_Timer0,w
  1327  007B  1D03               	skipz
  1328  007C  287F               	goto	u88_25
  1329  007D  3020               	movlw	32
  1330  007E  0229               	subwf	Timer0@i,w
  1331  007F                     u88_25:
  1332  007F  1803               	skipnc
  1333  0080  2882               	goto	u88_21
  1334  0081  2883               	goto	u88_20
  1335  0082                     u88_21:
  1336  0082  288B               	goto	i1l1191
  1337  0083                     u88_20:
  1338  0083                     i1l1189:
  1339                           
  1340                           ;main.c: 139:                     PORTA = segment[score_dig[2]];
  1341  0083  0020               	movlb	0	; select bank0
  1342  0084  0839               	movf	_score_dig+4,w
  1343  0085  3E45               	addlw	(low (_segment| 0))& (0+255)
  1344  0086  0086               	movwf	6
  1345  0087  0187               	clrf	7
  1346  0088  0801               	movf	1,w
  1347  0089  008C               	movwf	12	;volatile
  1348                           
  1349                           ;main.c: 140:                 }else{
  1350  008A  288E               	goto	i1l1193
  1351  008B                     i1l1191:
  1352                           
  1353                           ;main.c: 141:                     PORTA = 0xFF;
  1354  008B  30FF               	movlw	255
  1355  008C  0020               	movlb	0	; select bank0
  1356  008D  008C               	movwf	12	;volatile
  1357  008E                     i1l1193:
  1358                           
  1359                           ;main.c: 144:             if(index == 2){
  1360  008E  3002               	movlw	2
  1361  008F  064F               	xorwf	Timer0@index,w
  1362  0090  1D03               	btfss	3,2
  1363  0091  2893               	goto	u89_21
  1364  0092  2894               	goto	u89_20
  1365  0093                     u89_21:
  1366  0093  28AE               	goto	i1l1201
  1367  0094                     u89_20:
  1368  0094                     i1l1195:
  1369                           
  1370                           ;main.c: 145:                 PORTC = 0b101;
  1371  0094  3005               	movlw	5
  1372  0095  008E               	movwf	14	;volatile
  1373                           
  1374                           ;main.c: 146:                 if(i < 32){
  1375  0096  082A               	movf	Timer0@i+1,w
  1376  0097  3A80               	xorlw	128
  1377  0098  00A4               	movwf	??_Timer0
  1378  0099  3080               	movlw	128
  1379  009A  0224               	subwf	??_Timer0,w
  1380  009B  1D03               	skipz
  1381  009C  289F               	goto	u90_25
  1382  009D  3020               	movlw	32
  1383  009E  0229               	subwf	Timer0@i,w
  1384  009F                     u90_25:
  1385  009F  1803               	skipnc
  1386  00A0  28A2               	goto	u90_21
  1387  00A1  28A3               	goto	u90_20
  1388  00A2                     u90_21:
  1389  00A2  28AB               	goto	i1l1199
  1390  00A3                     u90_20:
  1391  00A3                     i1l1197:
  1392                           
  1393                           ;main.c: 147:                     PORTA = segment[score_dig[1]];
  1394  00A3  0020               	movlb	0	; select bank0
  1395  00A4  0837               	movf	_score_dig+2,w
  1396  00A5  3E45               	addlw	(low (_segment| 0))& (0+255)
  1397  00A6  0086               	movwf	6
  1398  00A7  0187               	clrf	7
  1399  00A8  0801               	movf	1,w
  1400  00A9  008C               	movwf	12	;volatile
  1401                           
  1402                           ;main.c: 148:                 }else{
  1403  00AA  28AE               	goto	i1l1201
  1404  00AB                     i1l1199:
  1405                           
  1406                           ;main.c: 149:                     PORTA = 0xFF;
  1407  00AB  30FF               	movlw	255
  1408  00AC  0020               	movlb	0	; select bank0
  1409  00AD  008C               	movwf	12	;volatile
  1410  00AE                     i1l1201:
  1411                           
  1412                           ;main.c: 153:             if(index == 3){
  1413  00AE  3003               	movlw	3
  1414  00AF  064F               	xorwf	Timer0@index,w
  1415  00B0  1D03               	btfss	3,2
  1416  00B1  28B3               	goto	u91_21
  1417  00B2  28B4               	goto	u91_20
  1418  00B3                     u91_21:
  1419  00B3  28CE               	goto	i1l115
  1420  00B4                     u91_20:
  1421  00B4                     i1l1203:
  1422                           
  1423                           ;main.c: 154:                 PORTC = 0b011;
  1424  00B4  3003               	movlw	3
  1425  00B5  008E               	movwf	14	;volatile
  1426                           
  1427                           ;main.c: 155:                 if(i < 32){
  1428  00B6  082A               	movf	Timer0@i+1,w
  1429  00B7  3A80               	xorlw	128
  1430  00B8  00A4               	movwf	??_Timer0
  1431  00B9  3080               	movlw	128
  1432  00BA  0224               	subwf	??_Timer0,w
  1433  00BB  1D03               	skipz
  1434  00BC  28BF               	goto	u92_25
  1435  00BD  3020               	movlw	32
  1436  00BE  0229               	subwf	Timer0@i,w
  1437  00BF                     u92_25:
  1438  00BF  1803               	skipnc
  1439  00C0  28C2               	goto	u92_21
  1440  00C1  28C3               	goto	u92_20
  1441  00C2                     u92_21:
  1442  00C2  28CB               	goto	i1l1207
  1443  00C3                     u92_20:
  1444  00C3                     i1l1205:
  1445                           
  1446                           ;main.c: 156:                     PORTA = segment[score_dig[0]];
  1447  00C3  0020               	movlb	0	; select bank0
  1448  00C4  0835               	movf	_score_dig,w
  1449  00C5  3E45               	addlw	(low (_segment| 0))& (0+255)
  1450  00C6  0086               	movwf	6
  1451  00C7  0187               	clrf	7
  1452  00C8  0801               	movf	1,w
  1453  00C9  008C               	movwf	12	;volatile
  1454                           
  1455                           ;main.c: 157:                 }else{
  1456  00CA  28CE               	goto	i1l115
  1457  00CB                     i1l1207:
  1458                           
  1459                           ;main.c: 158:                     PORTA = 0xFF;
  1460  00CB  30FF               	movlw	255
  1461  00CC  0020               	movlb	0	; select bank0
  1462  00CD  008C               	movwf	12	;volatile
  1463  00CE                     i1l115:	
  1464                           ;main.c: 161:             }
  1465                           
  1466                           
  1467                           ;main.c: 162:         }
  1468  00CE  3001               	movlw	1
  1469  00CF  07A9               	addwf	Timer0@i,f
  1470  00D0  3000               	movlw	0
  1471  00D1  3DAA               	addwfc	Timer0@i+1,f
  1472  00D2  082A               	movf	Timer0@i+1,w
  1473  00D3  3A80               	xorlw	128
  1474  00D4  00A4               	movwf	??_Timer0
  1475  00D5  3081               	movlw	129
  1476  00D6  0224               	subwf	??_Timer0,w
  1477  00D7  1D03               	skipz
  1478  00D8  28DB               	goto	u93_25
  1479  00D9  3000               	movlw	0
  1480  00DA  0229               	subwf	Timer0@i,w
  1481  00DB                     u93_25:
  1482  00DB  1C03               	skipc
  1483  00DC  28DE               	goto	u93_21
  1484  00DD  28DF               	goto	u93_20
  1485  00DE                     u93_21:
  1486  00DE  286E               	goto	i1l1185
  1487  00DF                     u93_20:
  1488  00DF                     i1l108:
  1489                           
  1490                           ;main.c: 163:         T0IF = 0;
  1491  00DF  110B               	bcf	11,2	;volatile
  1492  00E0                     i1l104:	
  1493                           ;main.c: 164:     }
  1494                           
  1495                           
  1496                           ;main.c: 166:     if(SSPIF){
  1497  00E0  0020               	movlb	0	; select bank0
  1498  00E1  1D91               	btfss	17,3	;volatile
  1499  00E2  28E4               	goto	u94_21
  1500  00E3  28E5               	goto	u94_20
  1501  00E4                     u94_21:
  1502  00E4  291B               	goto	i1l127
  1503  00E5                     u94_20:
  1504  00E5                     i1l1209:
  1505                           
  1506                           ;main.c: 167:         if((SSPSTAT & 0x04) == 0){
  1507  00E5  0024               	movlb	4	; select bank4
  1508  00E6  1914               	btfsc	20,2	;volatile
  1509  00E7  28E9               	goto	u95_21
  1510  00E8  28EA               	goto	u95_20
  1511  00E9                     u95_21:
  1512  00E9  2906               	goto	i1l119
  1513  00EA                     u95_20:
  1514  00EA                     i1l1211:
  1515                           
  1516                           ;main.c: 168:             if((SSPSTAT & 0x20) == 0){
  1517  00EA  1A94               	btfsc	20,5	;volatile
  1518  00EB  28ED               	goto	u96_21
  1519  00EC  28EE               	goto	u96_20
  1520  00ED                     u96_21:
  1521  00ED  28F6               	goto	i1l1217
  1522  00EE                     u96_20:
  1523  00EE                     i1l1213:
  1524                           
  1525                           ;main.c: 169:                 buf = SSPBUF;
  1526  00EE  0811               	movf	17,w	;volatile
  1527  00EF  0020               	movlb	0	; select bank0
  1528  00F0  00A4               	movwf	??_Timer0
  1529  00F1  0824               	movf	??_Timer0,w
  1530  00F2  00C4               	movwf	_buf
  1531  00F3                     i1l1215:
  1532                           
  1533                           ;main.c: 170:                 count = 0;
  1534  00F3  01BF               	clrf	_count
  1535  00F4  01C0               	clrf	_count+1
  1536                           
  1537                           ;main.c: 171:             }else{
  1538  00F5  2903               	goto	i1l1221
  1539  00F6                     i1l1217:
  1540                           
  1541                           ;main.c: 172:                 data[count++] = SSPBUF;
  1542  00F6  0811               	movf	17,w	;volatile
  1543  00F7  0020               	movlb	0	; select bank0
  1544  00F8  00A4               	movwf	??_Timer0
  1545  00F9  083F               	movf	_count,w
  1546  00FA  3E41               	addlw	(low (_data| 0))& (0+255)
  1547  00FB  0086               	movwf	6
  1548  00FC  0187               	clrf	7
  1549  00FD  0824               	movf	??_Timer0,w
  1550  00FE  0081               	movwf	1
  1551  00FF                     i1l1219:
  1552  00FF  3001               	movlw	1
  1553  0100  07BF               	addwf	_count,f
  1554  0101  3000               	movlw	0
  1555  0102  3DC0               	addwfc	_count+1,f
  1556  0103                     i1l1221:
  1557                           
  1558                           ;main.c: 174:             SSPCON1 |= 0x10;
  1559  0103  0024               	movlb	4	; select bank4
  1560  0104  1615               	bsf	21,4	;volatile
  1561                           
  1562                           ;main.c: 175:         }else{
  1563  0105  2919               	goto	i1l122
  1564  0106                     i1l119:
  1565                           
  1566                           ;main.c: 176:             if((SSPSTAT & 0x01) != 0){
  1567  0106  1C14               	btfss	20,0	;volatile
  1568  0107  2909               	goto	u97_21
  1569  0108  290A               	goto	u97_20
  1570  0109                     u97_21:
  1571  0109  2913               	goto	i1l123
  1572  010A                     u97_20:
  1573  010A                     i1l1223:
  1574                           
  1575                           ;main.c: 177:                 buf = SSPBUF;
  1576  010A  0811               	movf	17,w	;volatile
  1577  010B  0020               	movlb	0	; select bank0
  1578  010C  00A4               	movwf	??_Timer0
  1579  010D  0824               	movf	??_Timer0,w
  1580  010E  00C4               	movwf	_buf
  1581                           
  1582                           ;main.c: 178:                 SSPBUF = send;
  1583  010F  0843               	movf	_send,w
  1584  0110  0024               	movlb	4	; select bank4
  1585  0111  0091               	movwf	17	;volatile
  1586  0112  2903               	goto	i1l1221
  1587  0113                     i1l123:
  1588                           
  1589                           ;main.c: 181:                 if((SSPCON2 & 0x40) == 0){
  1590  0113  1B16               	btfsc	22,6	;volatile
  1591  0114  2916               	goto	u98_21
  1592  0115  2917               	goto	u98_20
  1593  0116                     u98_21:
  1594  0116  2919               	goto	i1l122
  1595  0117                     u98_20:
  1596  0117                     i1l1227:
  1597                           
  1598                           ;main.c: 182:                     SSPBUF = 0;
  1599  0117  0191               	clrf	17	;volatile
  1600  0118  2903               	goto	i1l1221
  1601  0119                     i1l122:	
  1602                           ;main.c: 188:         }
  1603                           
  1604                           
  1605                           ;main.c: 189:         SSPIF = 0;
  1606  0119  0020               	movlb	0	; select bank0
  1607  011A  1191               	bcf	17,3	;volatile
  1608  011B                     i1l127:
  1609  011B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1610  011C  0009               	retfie
  1611  011D                     __end_of_Timer0:
  1612                           
  1613                           	psect	text3
  1614  028E                     __ptext3:	
  1615 ;; *************** function ___awmod *****************
  1616 ;; Defined at:
  1617 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\awmod.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  divisor         2    0[COMMON] int 
  1620 ;;  dividend        2    2[COMMON] int 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  sign            1    6[COMMON] unsigned char 
  1623 ;;  counter         1    5[COMMON] unsigned char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  2    0[COMMON] int 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2, status,0
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1635 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1636 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1637 ;;Total ram usage:        7 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_Timer0
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function ___awmod
  1648  028E                     ___awmod:
  1649  028E                     i1l1041:	
  1650                           ;incstack = 0
  1651                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1652                           
  1653  028E  01F6               	clrf	___awmod@sign
  1654  028F                     i1l1043:
  1655  028F  1FF3               	btfss	___awmod@dividend+1,7
  1656  0290  2A92               	goto	u64_21
  1657  0291  2A93               	goto	u64_20
  1658  0292                     u64_21:
  1659  0292  2A9A               	goto	i1l1049
  1660  0293                     u64_20:
  1661  0293                     i1l1045:
  1662  0293  09F2               	comf	___awmod@dividend,f
  1663  0294  09F3               	comf	___awmod@dividend+1,f
  1664  0295  0AF2               	incf	___awmod@dividend,f
  1665  0296  1903               	skipnz
  1666  0297  0AF3               	incf	___awmod@dividend+1,f
  1667  0298                     i1l1047:
  1668  0298  01F6               	clrf	___awmod@sign
  1669  0299  0AF6               	incf	___awmod@sign,f
  1670  029A                     i1l1049:
  1671  029A  1FF1               	btfss	___awmod@divisor+1,7
  1672  029B  2A9D               	goto	u65_21
  1673  029C  2A9E               	goto	u65_20
  1674  029D                     u65_21:
  1675  029D  2AA3               	goto	i1l1053
  1676  029E                     u65_20:
  1677  029E                     i1l1051:
  1678  029E  09F0               	comf	___awmod@divisor,f
  1679  029F  09F1               	comf	___awmod@divisor+1,f
  1680  02A0  0AF0               	incf	___awmod@divisor,f
  1681  02A1  1903               	skipnz
  1682  02A2  0AF1               	incf	___awmod@divisor+1,f
  1683  02A3                     i1l1053:
  1684  02A3  0870               	movf	___awmod@divisor,w
  1685  02A4  0471               	iorwf	___awmod@divisor+1,w
  1686  02A5  1903               	btfsc	3,2
  1687  02A6  2AA8               	goto	u66_21
  1688  02A7  2AA9               	goto	u66_20
  1689  02A8                     u66_21:
  1690  02A8  2AD2               	goto	i1l1071
  1691  02A9                     u66_20:
  1692  02A9                     i1l1055:
  1693  02A9  01F5               	clrf	___awmod@counter
  1694  02AA  0AF5               	incf	___awmod@counter,f
  1695  02AB  2AB5               	goto	i1l1061
  1696  02AC                     i1l1057:
  1697  02AC  3001               	movlw	1
  1698  02AD                     u67_25:
  1699  02AD  35F0               	lslf	___awmod@divisor,f
  1700  02AE  0DF1               	rlf	___awmod@divisor+1,f
  1701  02AF  0B89               	decfsz	9,f
  1702  02B0  2AAD               	goto	u67_25
  1703  02B1                     i1l1059:
  1704  02B1  3001               	movlw	1
  1705  02B2  00F4               	movwf	??___awmod
  1706  02B3  0874               	movf	??___awmod,w
  1707  02B4  07F5               	addwf	___awmod@counter,f
  1708  02B5                     i1l1061:
  1709  02B5  1FF1               	btfss	___awmod@divisor+1,7
  1710  02B6  2AB8               	goto	u68_21
  1711  02B7  2AB9               	goto	u68_20
  1712  02B8                     u68_21:
  1713  02B8  2AAC               	goto	i1l1057
  1714  02B9                     u68_20:
  1715  02B9                     i1l1063:
  1716  02B9  0871               	movf	___awmod@divisor+1,w
  1717  02BA  0273               	subwf	___awmod@dividend+1,w
  1718  02BB  1D03               	skipz
  1719  02BC  2ABF               	goto	u69_25
  1720  02BD  0870               	movf	___awmod@divisor,w
  1721  02BE  0272               	subwf	___awmod@dividend,w
  1722  02BF                     u69_25:
  1723  02BF  1C03               	skipc
  1724  02C0  2AC2               	goto	u69_21
  1725  02C1  2AC3               	goto	u69_20
  1726  02C2                     u69_21:
  1727  02C2  2AC7               	goto	i1l1067
  1728  02C3                     u69_20:
  1729  02C3                     i1l1065:
  1730  02C3  0870               	movf	___awmod@divisor,w
  1731  02C4  02F2               	subwf	___awmod@dividend,f
  1732  02C5  0871               	movf	___awmod@divisor+1,w
  1733  02C6  3BF3               	subwfb	___awmod@dividend+1,f
  1734  02C7                     i1l1067:
  1735  02C7  3001               	movlw	1
  1736  02C8                     u70_25:
  1737  02C8  36F1               	lsrf	___awmod@divisor+1,f
  1738  02C9  0CF0               	rrf	___awmod@divisor,f
  1739  02CA  0B89               	decfsz	9,f
  1740  02CB  2AC8               	goto	u70_25
  1741  02CC                     i1l1069:
  1742  02CC  3001               	movlw	1
  1743  02CD  02F5               	subwf	___awmod@counter,f
  1744  02CE  1D03               	btfss	3,2
  1745  02CF  2AD1               	goto	u71_21
  1746  02D0  2AD2               	goto	u71_20
  1747  02D1                     u71_21:
  1748  02D1  2AB9               	goto	i1l1063
  1749  02D2                     u71_20:
  1750  02D2                     i1l1071:
  1751  02D2  0876               	movf	___awmod@sign,w
  1752  02D3  1903               	btfsc	3,2
  1753  02D4  2AD6               	goto	u72_21
  1754  02D5  2AD7               	goto	u72_20
  1755  02D6                     u72_21:
  1756  02D6  2ADC               	goto	i1l1075
  1757  02D7                     u72_20:
  1758  02D7                     i1l1073:
  1759  02D7  09F2               	comf	___awmod@dividend,f
  1760  02D8  09F3               	comf	___awmod@dividend+1,f
  1761  02D9  0AF2               	incf	___awmod@dividend,f
  1762  02DA  1903               	skipnz
  1763  02DB  0AF3               	incf	___awmod@dividend+1,f
  1764  02DC                     i1l1075:
  1765  02DC  0873               	movf	___awmod@dividend+1,w
  1766  02DD  00F1               	movwf	?___awmod+1
  1767  02DE  0872               	movf	___awmod@dividend,w
  1768  02DF  00F0               	movwf	?___awmod
  1769  02E0                     i1l443:
  1770  02E0  0008               	return
  1771  02E1                     __end_of___awmod:
  1772                           
  1773                           	psect	text4
  1774  022E                     __ptext4:	
  1775 ;; *************** function ___awdiv *****************
  1776 ;; Defined at:
  1777 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\awdiv.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  divisor         2    7[COMMON] int 
  1780 ;;  dividend        2    9[COMMON] int 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  quotient        2    2[BANK0 ] int 
  1783 ;;  sign            1    1[BANK0 ] unsigned char 
  1784 ;;  counter         1    0[BANK0 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2    7[COMMON] int 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1794 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1795 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1797 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1798 ;;Total ram usage:        9 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_Timer0
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           
  1808                           ;psect for function ___awdiv
  1809  022E                     ___awdiv:
  1810  022E                     i1l997:	
  1811                           ;incstack = 0
  1812                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1813                           
  1814  022E  0020               	movlb	0	; select bank0
  1815  022F  01A1               	clrf	___awdiv@sign
  1816  0230                     i1l999:
  1817  0230  1FF8               	btfss	___awdiv@divisor+1,7
  1818  0231  2A33               	goto	u54_21
  1819  0232  2A34               	goto	u54_20
  1820  0233                     u54_21:
  1821  0233  2A3B               	goto	i1l1005
  1822  0234                     u54_20:
  1823  0234                     i1l1001:
  1824  0234  09F7               	comf	___awdiv@divisor,f
  1825  0235  09F8               	comf	___awdiv@divisor+1,f
  1826  0236  0AF7               	incf	___awdiv@divisor,f
  1827  0237  1903               	skipnz
  1828  0238  0AF8               	incf	___awdiv@divisor+1,f
  1829  0239                     i1l1003:
  1830  0239  01A1               	clrf	___awdiv@sign
  1831  023A  0AA1               	incf	___awdiv@sign,f
  1832  023B                     i1l1005:
  1833  023B  1FFA               	btfss	___awdiv@dividend+1,7
  1834  023C  2A3E               	goto	u55_21
  1835  023D  2A3F               	goto	u55_20
  1836  023E                     u55_21:
  1837  023E  2A48               	goto	i1l1011
  1838  023F                     u55_20:
  1839  023F                     i1l1007:
  1840  023F  09F9               	comf	___awdiv@dividend,f
  1841  0240  09FA               	comf	___awdiv@dividend+1,f
  1842  0241  0AF9               	incf	___awdiv@dividend,f
  1843  0242  1903               	skipnz
  1844  0243  0AFA               	incf	___awdiv@dividend+1,f
  1845  0244                     i1l1009:
  1846  0244  3001               	movlw	1
  1847  0245  00FB               	movwf	??___awdiv
  1848  0246  087B               	movf	??___awdiv,w
  1849  0247  06A1               	xorwf	___awdiv@sign,f
  1850  0248                     i1l1011:
  1851  0248  01A2               	clrf	___awdiv@quotient
  1852  0249  01A3               	clrf	___awdiv@quotient+1
  1853  024A                     i1l1013:
  1854  024A  0877               	movf	___awdiv@divisor,w
  1855  024B  0478               	iorwf	___awdiv@divisor+1,w
  1856  024C  1903               	btfsc	3,2
  1857  024D  2A4F               	goto	u56_21
  1858  024E  2A50               	goto	u56_20
  1859  024F                     u56_21:
  1860  024F  2A7F               	goto	i1l1033
  1861  0250                     u56_20:
  1862  0250                     i1l1015:
  1863  0250  01A0               	clrf	___awdiv@counter
  1864  0251  0AA0               	incf	___awdiv@counter,f
  1865  0252  2A5C               	goto	i1l1021
  1866  0253                     i1l1017:
  1867  0253  3001               	movlw	1
  1868  0254                     u57_25:
  1869  0254  35F7               	lslf	___awdiv@divisor,f
  1870  0255  0DF8               	rlf	___awdiv@divisor+1,f
  1871  0256  0B89               	decfsz	9,f
  1872  0257  2A54               	goto	u57_25
  1873  0258                     i1l1019:
  1874  0258  3001               	movlw	1
  1875  0259  00FB               	movwf	??___awdiv
  1876  025A  087B               	movf	??___awdiv,w
  1877  025B  07A0               	addwf	___awdiv@counter,f
  1878  025C                     i1l1021:
  1879  025C  1FF8               	btfss	___awdiv@divisor+1,7
  1880  025D  2A5F               	goto	u58_21
  1881  025E  2A60               	goto	u58_20
  1882  025F                     u58_21:
  1883  025F  2A53               	goto	i1l1017
  1884  0260                     u58_20:
  1885  0260                     i1l1023:
  1886  0260  3001               	movlw	1
  1887  0261                     u59_25:
  1888  0261  35A2               	lslf	___awdiv@quotient,f
  1889  0262  0DA3               	rlf	___awdiv@quotient+1,f
  1890  0263  0B89               	decfsz	9,f
  1891  0264  2A61               	goto	u59_25
  1892  0265  0878               	movf	___awdiv@divisor+1,w
  1893  0266  027A               	subwf	___awdiv@dividend+1,w
  1894  0267  1D03               	skipz
  1895  0268  2A6B               	goto	u60_25
  1896  0269  0877               	movf	___awdiv@divisor,w
  1897  026A  0279               	subwf	___awdiv@dividend,w
  1898  026B                     u60_25:
  1899  026B  1C03               	skipc
  1900  026C  2A6E               	goto	u60_21
  1901  026D  2A6F               	goto	u60_20
  1902  026E                     u60_21:
  1903  026E  2A74               	goto	i1l1029
  1904  026F                     u60_20:
  1905  026F                     i1l1025:
  1906  026F  0877               	movf	___awdiv@divisor,w
  1907  0270  02F9               	subwf	___awdiv@dividend,f
  1908  0271  0878               	movf	___awdiv@divisor+1,w
  1909  0272  3BFA               	subwfb	___awdiv@dividend+1,f
  1910  0273                     i1l1027:
  1911  0273  1422               	bsf	___awdiv@quotient,0
  1912  0274                     i1l1029:
  1913  0274  3001               	movlw	1
  1914  0275                     u61_25:
  1915  0275  36F8               	lsrf	___awdiv@divisor+1,f
  1916  0276  0CF7               	rrf	___awdiv@divisor,f
  1917  0277  0B89               	decfsz	9,f
  1918  0278  2A75               	goto	u61_25
  1919  0279                     i1l1031:
  1920  0279  3001               	movlw	1
  1921  027A  02A0               	subwf	___awdiv@counter,f
  1922  027B  1D03               	btfss	3,2
  1923  027C  2A7E               	goto	u62_21
  1924  027D  2A7F               	goto	u62_20
  1925  027E                     u62_21:
  1926  027E  2A60               	goto	i1l1023
  1927  027F                     u62_20:
  1928  027F                     i1l1033:
  1929  027F  0821               	movf	___awdiv@sign,w
  1930  0280  1903               	btfsc	3,2
  1931  0281  2A83               	goto	u63_21
  1932  0282  2A84               	goto	u63_20
  1933  0283                     u63_21:
  1934  0283  2A89               	goto	i1l1037
  1935  0284                     u63_20:
  1936  0284                     i1l1035:
  1937  0284  09A2               	comf	___awdiv@quotient,f
  1938  0285  09A3               	comf	___awdiv@quotient+1,f
  1939  0286  0AA2               	incf	___awdiv@quotient,f
  1940  0287  1903               	skipnz
  1941  0288  0AA3               	incf	___awdiv@quotient+1,f
  1942  0289                     i1l1037:
  1943  0289  0823               	movf	___awdiv@quotient+1,w
  1944  028A  00F8               	movwf	?___awdiv+1
  1945  028B  0822               	movf	___awdiv@quotient,w
  1946  028C  00F7               	movwf	?___awdiv
  1947  028D                     i1l430:
  1948  028D  0008               	return
  1949  028E                     __end_of___awdiv:
  1950  007E                     btemp	set	126	;btemp
  1951  007E                     int$flags	set	126
  1952  007E                     wtemp0	set	126
  1953                           
  1954                           	psect	config
  1955                           
  1956                           ;Config register CONFIG1 @ 0x8007
  1957                           ;	Oscillator Selection
  1958                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1959                           ;	Watchdog Timer Enable
  1960                           ;	WDTE = OFF, WDT disabled
  1961                           ;	Power-up Timer Enable
  1962                           ;	PWRTE = OFF, PWRT disabled
  1963                           ;	MCLR Pin Function Select
  1964                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1965                           ;	Flash Program Memory Code Protection
  1966                           ;	CP = OFF, Program memory code protection is disabled
  1967                           ;	Data Memory Code Protection
  1968                           ;	CPD = OFF, Data memory code protection is disabled
  1969                           ;	Brown-out Reset Enable
  1970                           ;	BOREN = ON, Brown-out Reset enabled
  1971                           ;	Clock Out Enable
  1972                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1973                           ;	Internal/External Switchover
  1974                           ;	IESO = ON, Internal/External Switchover mode is enabled
  1975                           ;	Fail-Safe Clock Monitor Enable
  1976                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1977  8007                     	org	32775
  1978  8007  3FE4               	dw	16356
  1979                           
  1980                           ;Config register CONFIG2 @ 0x8008
  1981                           ;	Flash Memory Self-Write Protection
  1982                           ;	WRT = OFF, Write protection off
  1983                           ;	Voltage Regulator Capacitor Enable
  1984                           ;	VCAPEN = OFF, All VCAP pin functionality is disabled
  1985                           ;	PLL Enable
  1986                           ;	PLLEN = ON, 4x PLL enabled
  1987                           ;	Stack Overflow/Underflow Reset Enable
  1988                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  1989                           ;	Brown-out Reset Voltage Selection
  1990                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1991                           ;	Low-Voltage Programming Enable
  1992                           ;	LVP = ON, Low-voltage programming enabled
  1993  8008                     	org	32776
  1994  8008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         17
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     21      48
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer0 in COMMON

    _Timer0->___awdiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    _main->___wmul

Critical Paths under _Timer0 in BANK0

    _Timer0->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Timer0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Timer0 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Timer0 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Timer0 in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Timer0 in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Timer0 in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Timer0 in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Timer0 in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Timer0 in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     396
                                             17 BANK0      4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     396
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0                                               7     7      0    1643
                                              4 BANK0      7     7      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     904
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     604
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul

 _Timer0 (ROOT)
   ___awdiv
     ___awmod (ARG)
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      30       5       60.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      3D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      3D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Aug 19 15:41:31 2020

                     l81 0165                       l91 01C7                       l93 01E1  
                     l89 01A9             ___awdiv@sign 0021                       _io 007C  
    ___wmul@multiplicand 002D                      l277 02EC                      l279 0300  
                    l991 02F6                      l983 02E1                      l993 02FC  
                    l985 02E4                      l987 02E8                      _GIE 005F  
                    l989 02F1                      _RB0 0068                      _RB1 0069  
                    _RB2 006A                      _RB3 006B                      _RB4 006C  
                    _RB5 006D                      u500 02E8                      u501 02E7  
                    u530 02FC                      u531 02FB                      u515 02ED  
                    u525 02F2                      u800 01A5                      u801 01A4  
                    u810 01B6                      u730 016B                      u811 01B5  
                    u731 016A                      u820 01C2                      u740 0170  
                    u821 01C1                      u741 016F                      u830 01D5  
                    u750 0178                      u831 01D4                      u815 01B2  
                    u751 0177                      u840 01DD                      u760 0180  
                    u841 01DC                      u761 017F                      u850 01EE  
                    u770 0188                      u851 01ED                      u835 01D1  
                    u771 0187                      u780 0190                      u781 018F  
                    u790 0198                      u855 01EA                      u791 0197  
                    u997 0225                      _buf 0044             ___awmod@sign 0076  
                    wreg 0009                     l1101 0159                     l1111 0162  
                   l1103 015D                     l1121 0174                     l1113 0163  
                   l1105 015E                     l1131 0188                     l1123 0178  
                   l1115 0164                     l1107 015F                     l1141 019C  
                   l1133 018C                     l1125 017C                     l1117 016B  
                   l1109 0160                     l1151 01D5                     l1143 01A5  
                   l1135 0190                     l1127 0180                     l1119 0170  
                   l1161 021E                     l1153 01D8                     l1145 01B6  
                   l1137 0194                     l1129 0184                     l1081 013B  
                   l1163 021F                     l1155 01DD                     l1147 01B9  
                   l1139 0198                     l1091 014C                     l1083 0141  
                   l1157 01EE                     l1149 01C2                     l1093 014E  
                   l1085 0146                     l1159 01F1                     l1095 0150  
                   l1087 0148                     l1079 0138                     l1097 0153  
                   l1089 014A                     l1099 0156                     _T0IE 005D  
                   _T0IF 005A                     _TMR0 0015                     _WPUB 020D  
                   _data 0041                     _main 0138                     _send 0043  
                   _time 003B                     fsr0h 0005                     fsr1h 0007  
                   indf0 0000                     fsr0l 0004                     indf1 0001  
                   fsr1l 0006                     btemp 007E                     start 011D  
                  ?_main 0070          __end_of___awdiv 028E          __end_of___awmod 02E1  
        ___awdiv@divisor 0077                    i1l104 00E0                    i1l122 0119  
                  i1l123 0113                    i1l115 00CE                    i1l108 00DF  
                  i1l119 0106                    i1l127 011B                    i1l430 028D  
                  i1l443 02E0                    i1l997 022E                    i1l999 0230  
        ___awdiv@counter 0020                    _PORTA 000C                    _PORTB 000D  
                  _PORTC 000E                    u60_20 026F                    u60_21 026E  
                  u60_25 026B                    u61_25 0275                    u62_20 027F  
                  u54_20 0234                    u62_21 027E                    u54_21 0233  
                  u70_25 02C8                    u63_20 0284                    u55_20 023F  
                  u71_20 02D2                    u63_21 0283                    u55_21 023E  
                  u71_21 02D1                    u56_20 0250                    u72_20 02D7  
                  u64_20 0293                    u56_21 024F                    u72_21 02D6  
                  u64_21 0292                    u65_20 029E                    u65_21 029D  
                  _TRISA 008C                    _TRISB 008D                    u57_25 0254  
                  _TRISC 008E                    _SSPIE 048B                    u58_20 0260  
                  u66_20 02A9                    u90_20 00A3                    _SSPIF 008B  
                  u58_21 025F                    u66_21 02A8                    u90_21 00A2  
                  u90_25 009F                    u91_20 00B4                    u91_21 00B3  
                  u59_25 0261                    u67_25 02AD                    u68_20 02B9  
                  u92_20 00C3                    u68_21 02B8                    u92_21 00C2  
                  u92_25 00BF                    u69_20 02C3                    u93_20 00DF  
                  u69_21 02C2                    u93_21 00DE                    u69_25 02BF  
                  u93_25 00DB                    u94_20 00E5                    u86_20 000A  
                  u94_21 00E4                    u86_21 0009                    u95_20 00EA  
                  u87_20 0074                    u95_21 00E9                    u87_21 0073  
                  u96_20 00EE                    u88_20 0083                    u96_21 00ED  
                  u88_21 0082                    u88_25 007F                    u97_20 010A  
                  u89_20 0094                    u97_21 0109                    u89_21 0093  
                  u98_20 0117                    u98_21 0116                    _count 003F  
                  _score 003D                    status 0003                    wtemp0 007E  
        __initialization 011F             __end_of_main 022E                   ??_main 0031  
       ___awdiv@dividend 0079                   _ANSELA 018C                   _ANSELB 018D  
                 i1l1001 0234                   i1l1011 0248                   i1l1003 0239  
                 i1l1021 025C                   i1l1013 024A                   i1l1005 023B  
                 i1l1031 0279                   i1l1023 0260                   i1l1015 0250  
                 i1l1007 023F                   i1l1025 026F                   i1l1017 0253  
                 i1l1033 027F                   i1l1009 0244                   i1l1041 028E  
                 i1l1201 00AE                   i1l1035 0284                   i1l1027 0273  
                 i1l1019 0258                   i1l1051 029E                   i1l1043 028F  
                 i1l1211 00EA                   i1l1203 00B4                   i1l1037 0289  
                 i1l1029 0274                   i1l1061 02B5                   i1l1053 02A3  
                 i1l1045 0293                   i1l1221 0103                   i1l1213 00EE  
                 i1l1205 00C3                   i1l1063 02B9                   i1l1055 02A9  
                 i1l1071 02D2                   i1l1047 0298                   i1l1223 010A  
                 i1l1215 00F3                   i1l1207 00CB                   i1l1073 02D7  
                 i1l1065 02C3                   i1l1057 02AC                   i1l1049 029A  
                 i1l1217 00F6                   i1l1209 00E5                   i1l1075 02DC  
                 i1l1067 02C7                   i1l1059 02B1                   i1l1227 0117  
                 i1l1219 00FF                   i1l1171 0021                   i1l1069 02CC  
                 i1l1173 0031                   i1l1165 0006                   i1l1191 008B  
                 i1l1175 004C                   i1l1167 000A                   i1l1193 008E  
                 i1l1185 006E                   i1l1177 005C                   i1l1169 000D  
                 i1l1195 0094                   i1l1187 0074                   i1l1179 006C  
                 i1l1197 00A3                   i1l1189 0083                   i1l1199 00AB  
                 _OSCCON 0099                   _SSPADD 0212               _Timer0$749 0027  
                 _SSPBUF 0211                   _SSPMSK 0213                   _Timer0 0004  
                 ___wmul 02E1                ??___awdiv 007B                ??___awmod 0074  
       ___awdiv@quotient 0022          ___awmod@divisor 0070          ___awmod@counter 0075  
__end_of__initialization 0134           __pcstackCOMMON 0070             __pidataBANK0 0301  
         _OPTION_REGbits 0095               __pbssBANK0 0035                  ?_Timer0 0070  
             __pmaintext 0138                  ?___wmul 002B               __pintentry 0004  
            Timer0@index 004F                  _SSPCON1 0215                  _SSPCON2 0216  
                _SSPSTAT 0214                  Timer0@i 0029          __size_of_Timer0 0119  
                ___awdiv 022E                  ___awmod 028E          __size_of___wmul 0020  
                __ptext1 02E1                  __ptext3 028E                  __ptext4 022E  
       ___awmod@dividend 0072                  _segment 0045                  clrloop0 0313  
   end_of_initialization 0134                  init_ram 030C                  initloop 030D  
         __end_of_Timer0 011D           __end_of___wmul 0301      start_initialization 011F  
               ??_Timer0 0024                 ??___wmul 002F              __pdataBANK0 0045  
            __pbssCOMMON 007C                ___latbits 0003            __pcstackBANK0 0020  
               ?___awdiv 0077                 ?___awmod 0070           ___wmul@product 002F  
              clear_ram0 0312                _score_dig 0035        ___wmul@multiplier 002B  
       __size_of___awdiv 0060         __size_of___awmod 0053            __size_of_main 00F6  
               int$flags 007E                 intlevel1 0000  
